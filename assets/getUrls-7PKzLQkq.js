const y="modulepreload",E=function(o){return"/"+o},u={},p=function(c,s,d){let i=Promise.resolve();if(s&&s.length>0){document.getElementsByTagName("link");const e=document.querySelector("meta[property=csp-nonce]"),t=(e==null?void 0:e.nonce)||(e==null?void 0:e.getAttribute("nonce"));i=Promise.allSettled(s.map(r=>{if(r=E(r),r in u)return;u[r]=!0;const l=r.endsWith(".css"),f=l?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${r}"]${f}`))return;const n=document.createElement("link");if(n.rel=l?"stylesheet":y,l||(n.as="script"),n.crossOrigin="",n.href=r,t&&n.setAttribute("nonce",t),document.head.appendChild(n),l)return new Promise((m,h)=>{n.addEventListener("load",m),n.addEventListener("error",()=>h(new Error(`Unable to preload CSS for ${r}`)))})}))}function a(e){const t=new Event("vite:preloadError",{cancelable:!0});if(t.payload=e,window.dispatchEvent(t),!t.defaultPrevented)throw e}return i.then(e=>{for(const t of e||[])t.status==="rejected"&&a(t.reason);return c().catch(a)})};async function v(o){const c=[];for(const s in o){const i=(await o[s]()).default;c.push(i)}return c}export{p as _,v as g};
